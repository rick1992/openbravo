<?xml version="1.0"?>
  <database name="FUNCTION SCR_GENERATE_DIMTIME">
    <function name="SCR_GENERATE_DIMTIME" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_AD_User_ID VARCHAR2(32):='0';
 
  v_NextNo VARCHAR2(32) ;
  v_count NUMBER(10):=0;
  v_PInstance_Log_ID VARCHAR2(32);
  v_Client_ID VARCHAR2(32);
  v_Aux NUMBER;

  Cur_Parameter RECORD;

  FechaDesde_ DATE;
  FechaHasta_ DATE;
  FechaAAAAMMDD_ NUMBER;
  Anio_ NUMBER;
  Trimestre_ NUMBER; 
  Mes_ NUMBER;
  Semana_ NUMBER;
  Dia_ NUMBER;
  DiaSemana_ NUMBER;
  NTrimestre_ character varying(7);
  NMes_ character varying(15);
  NMes3l_ character varying(3);
  NSemana_ character varying(10);
  NDia_ character varying(6);
  NDiaSemana_ character varying(10);


  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,i.AD_User_ID, i.AD_Client_ID, p.ParameterName, p.P_String, p.P_Date 
         FROM AD_PInstance i
           LEFT JOIN AD_PInstance_Para p ON i.AD_PInstance_ID=p.AD_PInstance_ID
         WHERE i.AD_PInstance_ID=p_PInstance_ID
         ORDER BY p.SeqNo) 
      LOOP
          v_AD_User_ID:=Cur_Parameter.AD_User_ID;
	  v_Client_ID:=Cur_Parameter.AD_Client_ID;
      END LOOP; -- Get Parameter
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;

  BEGIN --BODY 

    SET datestyle = "ISO, DMY";

    FechaDesde_ := CAST('20100101' AS timestamp);
    FechaHasta_ := CAST(CAST(date_part('year',now())+10 AS CHAR(4)) || '1231' AS timestamp);

    v_count:=0;
    WHILE (FechaDesde_ <= FechaHasta_) 
    LOOP
       FechaAAAAMMDD_ := date_part('year',FechaDesde_)*10000+
                         date_part('month',FechaDesde_)*100+
                         date_part('day',FechaDesde_);

       Anio_ := to_char(FechaDesde_, 'yy');
       Trimestre_ := to_char(FechaDesde_, 'Q');
       Mes_ := to_char(FechaDesde_, 'MM');
       Semana_ := to_char(FechaDesde_, 'WW');
       Dia_ := to_char(FechaDesde_, 'DD');
       DiaSemana_ := to_char(FechaDesde_, 'D');
       NMes_ := to_char(FechaDesde_, 'Month');
       NMes3l_ := to_char(FechaDesde_, 'Mon');
       NTrimestre_ := 'T' || to_char(FechaDesde_, 'Q');
       NSemana_ := 'Sem ' || to_char(FechaDesde_, 'WW');
       NDia_ := Dia_ || ' ' || NMes3l_;
       NDiaSemana_ := to_char(FechaDesde_, 'Dy');

       --Check for duplicate
       SELECT Count(*)
         INTO v_Aux
         FROM SCR_Dimtime
       WHERE AD_Client_ID = v_Client_ID AND
	     fecha = FechaDesde_ LIMIT 1;

       IF(v_Aux=0) THEN
         INSERT INTO scr_dimtime(
                       scr_dimtime_id, ad_client_id, ad_org_id, isactive, created, createdby, 
                       updated, updatedby, fecha, anio, trimestre, mes, semana, dia, 
                       diasemana, ntrimestre, nmes, nmes3l, nsemana, ndia, ndiasemana)
               VALUES (
                       FechaAAAAMMDD_ , v_Client_ID, '0', 'Y', now(), v_AD_User_ID, 
                       now(), v_AD_User_ID, FechaDesde_, Anio_, Trimestre_, Mes_, Semana_, Dia_, 
                       DiaSemana_, NTrimestre_, NMes_, NMes3l_, NSemana_, NDia_, NDiaSemana_);
         v_count := v_count + 1;
       END IF;
   
      FechaDesde_ := FechaDesde_ + interval '1' day;
    END LOOP;

    --Insert dimtipocompra
    --Check for duplicate
       SELECT Count(*)
         INTO v_Aux
         FROM SCR_Dimtipocompra
       WHERE AD_Client_ID = v_Client_ID AND
	     (scr_dimtipocompra_id = 'Y' OR name = 'Importacion') LIMIT 1;

    IF(v_Aux=0) THEN
      INSERT INTO scr_dimtipocompra(
              scr_dimtipocompra_id, ad_client_id, ad_org_id, isactive, created, 
              createdby, updated, updatedby, name)
      VALUES (
              'Y', v_Client_ID, '0', 'Y', now(), 
              v_AD_User_ID, now(), v_AD_User_ID, 'Importacion');
    END IF;

    --Check for duplicate
       SELECT Count(*)
         INTO v_Aux
         FROM SCR_Dimtipocompra
       WHERE AD_Client_ID = v_Client_ID AND
	     (scr_dimtipocompra_id = 'N' OR name = 'Compra Nacional') LIMIT 1;

    IF(v_Aux=0) THEN
      INSERT INTO scr_dimtipocompra(
              scr_dimtipocompra_id, ad_client_id, ad_org_id, isactive, created, 
              createdby, updated, updatedby, name)
      VALUES (
              'N', v_Client_ID, '0', 'Y', now(), 
              v_AD_User_ID, now(), v_AD_User_ID, 'Compra Nacional');
    END IF;


    v_Message:=v_Message || '@Created@ = ' || v_count;

    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    RETURN;
    
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
--  RETURN;
END SCR_GENERATE_DIMTIME
]]></body>
    </function>
  </database>
