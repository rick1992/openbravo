<?xml version="1.0"?>
  <database name="FUNCTION SCO_BOE_CALCWITHHOLDINGAMT">
    <function name="SCO_BOE_CALCWITHHOLDINGAMT" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_AD_User_ID VARCHAR2(32):='0';
  -- Parameter
  TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
  CUR_BoeFrom RECORD;
  CUR_Record RECORD;
  -- Parameter Variables

  v_Client_ID VARCHAR2(32);
  v_c_Currency_ID VARCHAR(32);
  v_Inv_c_Currency_ID VARCHAR(32);
  
  v_iswithholdingaffected CHAR(1);
  v_docstatus VARCHAR(60);
  
  v_TotalMontoParaRet NUMBER:=0;
  v_MaxFacturaParaRet NUMBER:=0;
  v_Total_Amt_Pen NUMBER:=0;
  v_Convert_Rate NUMBER:=1;
  
  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,i.AD_User_ID, i.AD_Client_ID, p.ParameterName, p.P_String, p.P_Date 
         FROM AD_PInstance i
           LEFT JOIN AD_PInstance_Para p ON i.AD_PInstance_ID=p.AD_PInstance_ID
         WHERE i.AD_PInstance_ID=p_PInstance_ID
         ORDER BY p.SeqNo) 
      LOOP
	      v_Record_ID:=Cur_Parameter.Record_ID;
          v_AD_User_ID:=Cur_Parameter.AD_User_ID;
          v_Client_ID:=Cur_Parameter.AD_Client_ID;
      END LOOP; -- Get Parameter
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;

  BEGIN --BODY 


    --LOCK THE INVOICE
    SELECT docstatus, C_Currency_ID, Convert_Rate, iswithholdingaffected
      INTO v_docstatus, v_c_Currency_ID, v_Convert_Rate, v_iswithholdingaffected
      FROM SCO_BILLOFEXCHANGE
    WHERE SCO_BILLOFEXCHANGE_ID = v_Record_ID FOR UPDATE;

    IF(v_docstatus<>'DR') THEN
      RAISE_APPLICATION_ERROR(-20000, '@ActionNotAllowedHere@');
    END IF;

    
    IF (COALESCE(v_iswithholdingaffected,'N')='Y') THEN
      --Calculating withholding amount 
	  v_TotalMontoParaRet := 0;
	  v_MaxFacturaParaRet := 0;

	  FOR CUR_BoeFrom IN
	    (SELECT SCO_Boe_From.amount, SCO_Boe_From.withholdingamt, C_invoice.grandtotal
	       FROM SCO_Boe_From inner join c_invoice ON SCO_Boe_From.invoiceref_id=c_invoice.c_invoice_id
	      WHERE SCO_BILLOFEXCHANGE_ID = v_Record_ID)
	  LOOP
	    v_TotalMontoParaRet := v_TotalMontoParaRet + CUR_BoeFrom.amount + CUR_BoeFrom.withholdingamt;
	    SELECT c_currency_convert(CUR_BoeFrom.grandtotal, v_c_Currency_ID, '308', now()::timestamp, 'S', v_Client_ID) INTO v_Total_Amt_Pen FROM DUAL;

	    if(v_Total_Amt_Pen>=700) then
	       v_MaxFacturaParaRet := 1;
	    end if;
	 
	  END LOOP;


	  SELECT c_currency_convert(v_TotalMontoParaRet, v_c_Currency_ID, '308', now()::timestamp, 'S', v_Client_ID) INTO v_Total_Amt_Pen FROM DUAL;

	  IF(v_Total_Amt_Pen>=700 OR v_MaxFacturaParaRet=1) THEN 
	      --ACTUALIZAR RETENCION EN TODAS LAS LINEAS

	      UPDATE SCO_Boe_From SET amount=withholdingamt+amount, withholdingamt=round((withholdingamt+amount)*0.03,2) WHERE SCO_BILLOFEXCHANGE_ID = v_Record_ID;

	      UPDATE SCO_Boe_From SET amount=amount-withholdingamt WHERE SCO_BILLOFEXCHANGE_ID = v_Record_ID;

	      FOR CUR_Record IN
	        (SELECT SCO_Boe_From.sco_boe_from_id, C_invoice.grandtotal, C_Invoice.c_currency_id
	           FROM SCO_Boe_From inner join c_invoice ON SCO_Boe_From.invoiceref_id=c_invoice.c_invoice_id
	          WHERE SCO_BILLOFEXCHANGE_ID = v_Record_ID)
	      LOOP
	        IF(CUR_Record.c_currency_id=v_c_Currency_ID) THEN
	           UPDATE SCO_Boe_From SET convertedamount=amount WHERE sco_boe_from_id = CUR_Record.sco_boe_from_id;
	        ELSE 
	           UPDATE SCO_Boe_From SET convertedamount=round(amount*v_Convert_Rate,2) WHERE sco_boe_from_id = CUR_Record.sco_boe_from_id;
	        END IF;
	      END LOOP;		          
			
	  END IF;
	     

    ELSIF(COALESCE(v_iswithholdingaffected,'N')='N') THEN
	  --Returning withholding amount to amount
      UPDATE SCO_Boe_From SET amount=withholdingamt+amount, withholdingamt=0 WHERE SCO_BILLOFEXCHANGE_ID = v_Record_ID;

      FOR CUR_Record IN
	(SELECT SCO_Boe_From.sco_boe_from_id, C_invoice.grandtotal, C_Invoice.c_currency_id
	   FROM SCO_Boe_From inner join c_invoice ON SCO_Boe_From.invoiceref_id=c_invoice.c_invoice_id
	  WHERE SCO_BILLOFEXCHANGE_ID = v_Record_ID)
      LOOP
	IF(CUR_Record.c_currency_id=v_c_Currency_ID) THEN
	   UPDATE SCO_Boe_From SET convertedamount=amount WHERE sco_boe_from_id = CUR_Record.sco_boe_from_id;
	ELSE 
	   UPDATE SCO_Boe_From SET convertedamount=round(amount*v_Convert_Rate,2) WHERE sco_boe_from_id = CUR_Record.sco_boe_from_id;
	END IF;
      END LOOP;	

    END IF;

    v_Message:= '@Success@';

    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    RETURN;
    
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
--  RETURN;
END SCO_BOE_CALCWITHHOLDINGAMT
]]></body>
    </function>
  </database>
