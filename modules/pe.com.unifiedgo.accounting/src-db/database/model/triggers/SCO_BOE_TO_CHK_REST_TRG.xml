<?xml version="1.0"?>
  <database name="TRIGGER SCO_BOE_TO_CHK_REST_TRG">
    <trigger name="SCO_BOE_TO_CHK_REST_TRG" table="SCO_BOE_TO" fires="before" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[
  v_Processed VARCHAR(60) ;
  v_Posted VARCHAR(60) ;
  v_Currency     VARCHAR2(32);
  v_DocStatus VARCHAR(60);
  v_SCO_Billofexchange_ID  VARCHAR2(32);
  v_sumLinesAmount NUMBER;
  v_RendCuentasRefund NUMBER;

  v_invoiceOutstandingAmt NUMBER;
  v_invoiceDocStatus VARCHAR(60);
  v_invoiceDoctypeTarget_ID VARCHAR(32);
  v_invoiceIsSimpleProvision VARCHAR(1):='N';
  v_invoiceBoeTo_ID VARCHAR(32);
  v_invoiceIsPaid VARCHAR(1):='N';

  v_From_Currency_ID VARCHAR(32);
  v_Currency_ID VARCHAR(32);
  v_AD_Client_ID VARCHAR(32);
  v_AD_Org_ID VARCHAR(32);
  v_DateInvoiced DATE;
  v_CBpartner_ID VARCHAR(32);

  v_ConvertedAmount NUMBER;
BEGIN
    
    IF AD_isTriggerEnabled()='N' THEN RETURN;
    END IF;


  IF INSERTING THEN
    v_SCO_Billofexchange_ID:=:NEW.SCO_Billofexchange_ID;
  ELSE
    v_SCO_Billofexchange_ID:=:OLD.SCO_Billofexchange_ID;
  END IF;

  SELECT PROCESSED,
    C_CURRENCY_ID,DocStatus
  INTO v_Processed,
    v_Currency_ID, v_DocStatus
  FROM SCO_Billofexchange
  WHERE SCO_Billofexchange_ID=v_SCO_Billofexchange_ID;
  IF UPDATING THEN
    IF((v_Processed='Y') 
      AND ((COALESCE(:OLD.LINE, 0) <> COALESCE(:NEW.LINE, 0))
      OR(COALESCE(:OLD.SCO_Boe_To_ID, '0') <> COALESCE(:NEW.SCO_Boe_To_ID, '0'))
      OR(COALESCE(:OLD.C_Invoice_ID, '0') <> COALESCE(:NEW.C_Invoice_ID, '0'))
      OR(COALESCE(:OLD.AD_ORG_ID, '0') <> COALESCE(:NEW.AD_ORG_ID, '0'))
      OR(COALESCE(:OLD.AD_CLIENT_ID, '0') <> COALESCE(:NEW.AD_CLIENT_ID, '0'))
      )) THEN
      RAISE_APPLICATION_ERROR(-20000, '@20501@') ;
    END IF;
  END IF;

  IF((DELETING OR INSERTING) AND (v_Processed='Y')) THEN
    RAISE_APPLICATION_ERROR(-20000, '@20501@') ;
  END IF;

  IF(INSERTING OR UPDATING) THEN
 
    --Check Invoice Params
    SELECT outstandingamt,docstatus,c_doctypetarget_id,
           em_sco_boe_to_id,ispaid,
	   AD_Client_ID, AD_Org_ID, C_Currency_ID, dateinvoiced, c_bpartner_id
      INTO v_invoiceOutstandingAmt, v_invoiceDocStatus, v_invoiceDoctypeTarget_ID,
           v_invoiceBoeTo_ID, v_invoiceIsPaid,
	   v_AD_Client_ID, v_AD_Org_ID, v_From_Currency_ID, v_DateInvoiced, v_CBpartner_ID
      FROM C_Invoice
      WHERE C_Invoice_ID = :NEW.c_invoice_id;


    IF(TG_OP= 'INSERT') THEN
	IF(v_invoiceBoeTo_ID IS NOT NULL) THEN
	  RAISE_APPLICATION_ERROR(-20000, '@SCO_BOEToInvalidInvoiceRef@');
	END IF;
    ELSE
	IF(v_invoiceBoeTo_ID IS NOT NULL AND :OLD.c_invoice_id <> :NEW.c_invoice_id) THEN
	  RAISE_APPLICATION_ERROR(-20000, '@SCO_BOEToInvalidInvoiceRef@');
	END IF;
    END IF;

  END IF;
  
  IF (DELETING) THEN
    --Ulink the invoice ref
    UPDATE C_Invoice SET EM_SCO_Boe_To_ID = NULL
    WHERE C_Invoice_ID = :OLD.c_invoice_id;

  END IF;
  
  IF (UPDATING) THEN
    --Ulink the invoice ref there is a change in c_invoice_id
    IF(COALESCE(:OLD.c_invoice_id, '0') <> COALESCE(:NEW.c_invoice_id, '0')) THEN
      UPDATE C_Invoice SET EM_SCO_Boe_To_ID = NULL
      WHERE C_Invoice_ID = :OLD.c_invoice_id;
    END IF;
  END IF;
END SCO_BOE_TO_CHK_REST_TRG
]]></body>
    </trigger>
  </database>
