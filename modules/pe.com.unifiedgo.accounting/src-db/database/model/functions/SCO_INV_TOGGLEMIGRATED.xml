<?xml version="1.0"?>
  <database name="FUNCTION SCO_INV_TOGGLEMIGRATED">
    <function name="SCO_INV_TOGGLEMIGRATED" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_invoice_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistics
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_User VARCHAR2(32);
  v_IsProcessing CHAR(1) ;
  v_IsProcessed VARCHAR(60) ;
  v_Result NUMBER:=1; -- Success
  v_is_included NUMBER:=0;
  v_is_ready AD_Org.IsReady%TYPE;
  v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
  -- Record Info
  Cur_Invoice RECORD;
  v_isSoTrx CHAR(1) ;
  v_Aux NUMBER;

  BEGIN
    IF (p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String,
          p.P_Number, p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_User:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      v_Record_ID:=p_Invoice_ID;
      SELECT CREATEDBY INTO v_User  FROM C_INVOICE  WHERE C_INVOICE_ID=p_Invoice_ID;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
  BEGIN --BODY
  

    SELECT * INTO Cur_Invoice
    FROM C_INVOICE
    WHERE C_INVOICE_ID=v_Record_ID  FOR UPDATE;


    IF(Cur_Invoice.docstatus <> 'CO') THEN
      RAISE_APPLICATION_ERROR(-20000, '@SCO_ToggleMigratedInvNotCO@');
    END IF;

    IF(Cur_Invoice.posted NOT IN ('N','sco_M')) THEN
      RAISE_APPLICATION_ERROR(-20000, '@SCO_ToggleMigratedInvPosted@');
    END IF;

    IF(Cur_Invoice.posted = 'N') THEN
      UPDATE C_Invoice SET posted='sco_M' WHERE C_Invoice_ID = v_Record_ID;
    ELSIF(Cur_Invoice.posted = 'sco_M') THEN
      UPDATE C_Invoice SET posted='N' WHERE C_Invoice_ID = v_Record_ID;
    END IF;

    v_Message := '';

    IF (p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  v_ResultStr:= '@ERROR=' || SQLERRM;
  IF(p_PInstance_ID IS NOT NULL) THEN
    ROLLBACK;
    --Inserted by Carlos Romero 062706
    UPDATE C_INVOICE  SET Processing='N'  WHERE C_INVOICE_ID=v_Record_ID;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE;
  END IF;
  RETURN;
END SCO_INV_TOGGLEMIGRATED
]]></body>
    </function>
  </database>
