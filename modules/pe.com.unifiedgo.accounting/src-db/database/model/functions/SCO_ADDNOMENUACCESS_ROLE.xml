<?xml version="1.0"?>
  <database name="FUNCTION SCO_ADDNOMENUACCESS_ROLE">
    <function name="SCO_ADDNOMENUACCESS_ROLE" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistics
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_IsProcessing CHAR(1) ;
  v_IsProcessed VARCHAR(60) ;
  v_Result NUMBER:=1; -- Success
  v_is_included NUMBER:=0;
  v_is_ready AD_Org.IsReady%TYPE;
  v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_line RECORD;
  -- Record Info
  v_AD_Client_ID VARCHAR(32);
  v_AD_User_ID VARCHAR(32);
  v_Org_Name VARCHAR2(60);
  v_UpdatedBy VARCHAR2(32);

  v_NextNo VARCHAR(32);
  v_Aux NUMBER;

  CUR_ADWindow RECORD;
  CUR_ADProcess RECORD;
  CUR_ADForm RECORD;

  CUR_OBUIAPP_ViewImpl RECORD;
  CUR_OBUIAPP_Process RECORD;

  BEGIN
    IF (p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String,
          p.P_Number, p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
  BEGIN --BODY
  
    /**
    * Read Role
    */
    v_ResultStr:='ReadingRole';
    SELECT AD_Role.AD_Client_ID
    INTO v_AD_Client_ID
    FROM AD_ROLE
    WHERE AD_ROLE_ID=v_Record_ID  FOR UPDATE;

 
        -- For Window Access
    FOR CUR_ADWindow IN (SELECT * 
                           FROM AD_Window 
                           WHERE AD_Window_ID NOT IN 
                                               (SELECT AD_Window_ID FROM AD_Menu WHERE AD_Menu.issummary = 'N' AND
			                        AD_Menu.action IN ('W')) 
                             AND isactive = 'Y'
			)
    LOOP
      SELECT Count(*) 
        INTO v_Aux
        FROM AD_Window_Access
      WHERE AD_Window_ID = CUR_ADWindow.AD_Window_ID AND
            AD_Role_ID = v_Record_ID AND
            AD_Client_ID = v_AD_Client_ID;

      IF(v_Aux=0) THEN
        AD_Sequence_Next('AD_Window_Access', v_AD_Client_ID, v_NextNo) ;    
        INSERT INTO ad_window_access(
                ad_window_access_id, ad_window_id, ad_role_id, ad_client_id, 
                ad_org_id, isactive, created, createdby, updated, updatedby, 
                isreadwrite)
        VALUES (v_NextNo, CUR_ADWindow.AD_Window_ID, v_Record_ID, v_AD_Client_ID, 
                '0', 'Y', now(), v_AD_User_ID, now(), v_AD_User_ID, 
                'Y'); 
      END IF;
    END LOOP;

    -- For Report And Process Access
    FOR CUR_ADProcess IN (SELECT * 
                           FROM AD_Process 
                           WHERE AD_Process_ID NOT IN 
                                               (SELECT AD_Process_ID FROM AD_Menu WHERE AD_Menu.issummary = 'N' AND
			                        AD_Menu.action IN ('P','R')) 
                             AND isactive = 'Y'
			 )
    LOOP
      SELECT Count(*) 
        INTO v_Aux
        FROM AD_Process_Access
      WHERE AD_Process_ID = CUR_ADProcess.AD_Process_ID AND
            AD_Role_ID = v_Record_ID AND
            AD_Client_ID = v_AD_Client_ID;

      IF(v_Aux=0) THEN
        AD_Sequence_Next('AD_Process_Access', v_AD_Client_ID, v_NextNo) ;    
        INSERT INTO ad_process_access(
                ad_process_access_id, ad_process_id, ad_role_id, ad_client_id, 
                ad_org_id, isactive, created, createdby, updated, updatedby, 
                isreadwrite)
        VALUES (v_NextNo, CUR_ADProcess.AD_Process_ID, v_Record_ID, v_AD_Client_ID, 
                '0', 'Y', now(), v_AD_User_ID, now(), v_AD_User_ID, 
                'Y'); 
      END IF;
    END LOOP;

    -- For Form Access
    FOR CUR_ADForm IN (SELECT * 
                           FROM AD_Form 
                           WHERE AD_Form_ID NOT IN 
                                               (SELECT AD_Form_ID FROM AD_Menu WHERE AD_Menu.issummary = 'N' AND
			                        AD_Menu.action IN ('X')) 
                             AND isactive = 'Y'
                      )
    LOOP
      SELECT Count(*) 
        INTO v_Aux
        FROM AD_Form_Access
      WHERE AD_Form_ID = CUR_ADForm.AD_Form_ID AND
            AD_Role_ID = v_Record_ID AND
            AD_Client_ID = v_AD_Client_ID;

      IF(v_Aux=0) THEN
        AD_Sequence_Next('AD_Form_Access', v_AD_Client_ID, v_NextNo) ;    
        INSERT INTO ad_form_access(
                ad_form_access_id, ad_form_id, ad_role_id, ad_client_id, 
                ad_org_id, isactive, created, createdby, updated, updatedby, 
                isreadwrite)
        VALUES (v_NextNo, CUR_ADForm.AD_Form_ID, v_Record_ID, v_AD_Client_ID, 
                '0', 'Y', now(), v_AD_User_ID, now(), v_AD_User_ID, 
                'Y'); 
      END IF;
    END LOOP;


    -- For View Implementation Access
    FOR CUR_OBUIAPP_ViewImpl IN (SELECT * 
                                   FROM OBUIAPP_View_Impl 
                                   WHERE OBUIAPP_View_Impl_ID NOT IN 
                                               (SELECT EM_OBUIAPP_view_impl_ID FROM AD_Menu WHERE AD_Menu.issummary = 'N' AND
			                        AD_Menu.action IN ('OBUIAPP_OpenView')) 
                                   AND isactive = 'Y'
                                )
    LOOP
      SELECT Count(*) 
        INTO v_Aux
        FROM OBUIAPP_View_Role_Access
      WHERE OBUIAPP_View_Impl_ID = CUR_OBUIAPP_ViewImpl.OBUIAPP_View_Impl_ID AND
            AD_Role_ID = v_Record_ID AND
            AD_Client_ID = v_AD_Client_ID;

      IF(v_Aux=0) THEN
        AD_Sequence_Next('OBUIAPP_View_Role_Access', v_AD_Client_ID, v_NextNo) ;    
        INSERT INTO OBUIAPP_View_Role_Access(
                obuiapp_view_role_access_id, obuiapp_view_impl_id , ad_role_id, ad_client_id, 
                ad_org_id, isactive, created, createdby, updated, updatedby)
        VALUES (v_NextNo, CUR_OBUIAPP_ViewImpl.OBUIAPP_View_Impl_ID, v_Record_ID, v_AD_Client_ID, 
                '0', 'Y', now(), v_AD_User_ID, now(), v_AD_User_ID);
      END IF;
    END LOOP;

    -- For Process Definition Access
    FOR CUR_OBUIAPP_Process IN (SELECT * 
                                  FROM OBUIAPP_Process 
                                  WHERE OBUIAPP_Process_ID NOT IN 
                                               (SELECT EM_OBUIAPP_process_ID FROM AD_Menu WHERE AD_Menu.issummary = 'N' AND
			                        AD_Menu.action IN ('OBUIAPP_Process')) 
                                  AND isactive = 'Y'
                               )
    LOOP
      SELECT Count(*) 
        INTO v_Aux
        FROM OBUIAPP_Process_Access
      WHERE OBUIAPP_Process_ID = CUR_OBUIAPP_Process.OBUIAPP_Process_ID AND
            AD_Role_ID = v_Record_ID AND
            AD_Client_ID = v_AD_Client_ID;

      IF(v_Aux=0) THEN
        AD_Sequence_Next('OBUIAPP_Process_Access', v_AD_Client_ID, v_NextNo) ;    
        INSERT INTO OBUIAPP_Process_Access(
                obuiapp_process_access_id, obuiapp_process_id , ad_role_id, ad_client_id, 
                ad_org_id, isactive, created, createdby, updated, updatedby, 
                isreadwrite)
        VALUES (v_NextNo, CUR_OBUIAPP_Process.OBUIAPP_Process_ID, v_Record_ID, v_AD_Client_ID, 
                '0', 'Y', now(), v_AD_User_ID, now(), v_AD_User_ID,
                'Y');
      END IF;
    END LOOP;

    IF (p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  v_ResultStr:= '@ERROR=' || SQLERRM;
  IF(p_PInstance_ID IS NOT NULL) THEN
    ROLLBACK;
    --Inserted by Carlos Romero 062706
    UPDATE AD_ROLE  SET Processing='N'  WHERE AD_ROLE_ID=v_Record_ID;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE;
  END IF;
  RETURN;
END SCO_ADDNOMENUACCESS_ROLE
]]></body>
    </function>
  </database>
