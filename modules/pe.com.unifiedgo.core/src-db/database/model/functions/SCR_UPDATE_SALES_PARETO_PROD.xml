<?xml version="1.0"?>
  <database name="FUNCTION SCR_UPDATE_SALES_PARETO_PROD">
    <function name="SCR_UPDATE_SALES_PARETO_PROD" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_warehouse_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_org_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_client_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2012 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/

  v_ResultStr VARCHAR2(2000):='';
  v_Result NUMBER:= 1;
  v_Message VARCHAR2(2000):='';
  v_exist NUMBER:=0;
  v_M_Product_Org_ID VARCHAR2(32);
  v_warehouse_ID VARCHAR2(32);
  v_org_ID VARCHAR2(32);
  v_client_ID VARCHAR2(32);
  v_count_update NUMBER:= 0;
    v_currency VARCHAR2(32);
  TYPE RECORD IS REF CURSOR;
  Cur_Cursor RECORD;
  Cur_Parameter RECORD;
  v_AD_Client_ID VARCHAR2(32);
  v_totalQty NUMBER;
BEGIN

  IF(p_PInstance_ID IS NOT NULL) THEN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String, p.P_Number, p.P_Date, i.UpdatedBy
                          FROM AD_PINSTANCE i LEFT JOIN AD_PINSTANCE_PARA p ON i.AD_PInstance_ID=p.AD_PInstance_ID
                          WHERE i.AD_PInstance_ID=p_PInstance_ID
                          ORDER BY p.SeqNo) LOOP
      IF (Cur_Parameter.ParameterName = 'm_warehouse_id') THEN
        v_warehouse_ID := Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  m_warehouse_id=' || v_warehouse_ID) ;
      ELSIF (Cur_Parameter.ParameterName = 'ad_org_id') THEN
        v_org_ID := Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  ad_org_id=' || v_org_ID) ;
      ELSIF (Cur_Parameter.ParameterName = 'ad_client_id') THEN
        v_client_ID := Cur_Parameter.P_String;
        DBMS_OUTPUT.PUT_LINE('  ad_client_id=' || v_client_ID) ;
      END IF;
    END LOOP; --Get Parameter

  ELSE
    DBMS_OUTPUT.PUT_LINE('--<<SCR_UPDATE_SALES_PARETO_PROD>>') ;
    v_warehouse_ID:=p_warehouse_ID;
    v_org_ID:=p_org_ID;
    v_client_ID := p_client_id;
  END IF;
BEGIN --BODY

  SELECT C_CURRENCY_ID INTO v_currency
  FROM AD_CLIENT
  WHERE AD_CLIENT_ID = v_client_ID;
    
  SELECT COALESCE(C_CURRENCY_ID, v_currency) INTO v_currency
  FROM AD_ORG
  WHERE AD_ORG_ID = (AD_GET_ORG_LE_BU (v_org_ID, 'LE'));

  -- Checks if Sum of all Product's movements are zero
  SELECT sum(movementqty) INTO v_totalQty
  FROM (
    SELECT sum(CASE WHEN T.MOVEMENTQTY<0 THEN -T.MOVEMENTQTY ELSE 0 END) as movementqty, w.m_warehouse_id
    FROM M_TRANSACTION T
      LEFT JOIN M_LOCATOR L ON (T.M_LOCATOR_ID=L.M_LOCATOR_ID)
      LEFT JOIN M_WAREHOUSE W ON (L.M_WAREHOUSE_ID=W.M_WAREHOUSE_ID)
      inner join m_inoutline iol on (T.m_inoutline_id = iol.m_inoutline_id)
      inner join m_inout io on (iol.m_inout_id = io.m_inout_id)
      inner join scr_combo_item cmbi on (io.EM_Swa_Combo_Item_ID = cmbi.scr_combo_item_id)
    WHERE T.m_inoutline_id is not null  
      and cmbi.scr_combo_category_id = '38F1793A888C4E7784436C80F48F6169'
      AND (v_warehouse_ID IS NULL OR L.M_WAREHOUSE_ID = v_warehouse_ID)
      AND ad_isorgincluded(W.AD_ORG_ID, v_org_ID, T.AD_CLIENT_ID) <> -1
      AND (v_client_ID IS NULL OR T.AD_CLIENT_ID = v_client_ID)
    GROUP BY w.ad_org_id, w.ad_client_id, w.m_warehouse_id
  ) A
  WHERE A.m_warehouse_id = v_warehouse_ID
  HAVING SUM(A.MOVEMENTQTY) > 0;

  IF (v_totalQty = 0) THEN
    RAISE_APPLICATION_ERROR(-20000, '@SCR_ZeroTotalQty@');
  END IF;


  FOR Cur_Cursor IN (
      SELECT SCR_GET_SALES_PARETO_ABC(v_warehouse_ID, v_org_ID, v_client_ID, PERCENTAGE) AS ISABC,
          AD_ORG_ID, AD_CLIENT_ID, M_PRODUCT_ID
      FROM (
          SELECT 100*(SUM(movementqty) / v_totalQty) AS PERCENTAGE, AD_ORG_ID, AD_CLIENT_ID, M_PRODUCT_ID
          FROM (
              SELECT sum(CASE WHEN T.MOVEMENTQTY<0 THEN -T.MOVEMENTQTY ELSE 0 END) as movementqty,	
                    T.M_PRODUCT_ID, W.AD_ORG_ID, W.AD_CLIENT_ID, w.m_warehouse_id as warehouse
              FROM M_TRANSACTION T
                LEFT JOIN M_LOCATOR L ON (T.M_LOCATOR_ID=L.M_LOCATOR_ID)
                LEFT JOIN M_WAREHOUSE W ON (L.M_WAREHOUSE_ID=W.M_WAREHOUSE_ID)
                inner join m_inoutline iol on (T.m_inoutline_id = iol.m_inoutline_id)
                inner join m_inout io on (iol.m_inout_id = io.m_inout_id)
                inner join scr_combo_item cmbi on (io.EM_Swa_Combo_Item_ID = cmbi.scr_combo_item_id)
              WHERE T.m_inoutline_id is not null  
                and cmbi.scr_combo_category_id = '38F1793A888C4E7784436C80F48F6169'
                AND (v_warehouse_ID IS NULL OR L.M_WAREHOUSE_ID = v_warehouse_ID)
                AND ad_isorgincluded(W.AD_ORG_ID, v_org_ID, T.AD_CLIENT_ID) <> -1
                AND (v_client_ID IS NULL OR W.AD_CLIENT_ID = v_client_ID)
              GROUP BY T.M_PRODUCT_ID, W.AD_ORG_ID, W.AD_CLIENT_ID, W.m_warehouse_id
              HAVING SUM(CASE WHEN T.MOVEMENTQTY<0 THEN -T.MOVEMENTQTY ELSE 0 END) > 0
          ) A
          GROUP BY M_PRODUCT_ID, AD_ORG_ID, AD_CLIENT_ID, warehouse
          ORDER BY AD_ORG_ID, PERCENTAGE DESC
      ) B
  ) LOOP

    UPDATE M_PRODUCT
       SET em_scr_ABC = Cur_Cursor.ISABC
     WHERE M_PRODUCT_ID = Cur_Cursor.M_PRODUCT_ID;
    v_count_update := v_count_update + 1;


  END LOOP;
  v_Message:='@Updated@=' || v_count_update;
--<<FINISH_PROCESS>>
  IF (p_PInstance_ID IS NOT NULL) THEN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
  ELSE
    DBMS_OUTPUT.PUT_LINE('--<<SCR_UPDATE_SALES_PARETO_PROD finished>>') ;
  END IF;
  RETURN;
END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  IF(p_PInstance_ID IS NOT NULL) THEN
    ROLLBACK;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE;
  END IF;
  RETURN;
END SCR_UPDATE_SALES_PARETO_PROD
]]></body>
    </function>
  </database>
