<?xml version="1.0"?>
  <database name="FUNCTION SCR_TABLE_COPYKEYWORD">
    <function name="SCR_TABLE_COPYKEYWORD" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_ad_table_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_AD_User_ID VARCHAR2(32):='0';
  p_ad_module_id varchar2(32);
  p_ad_table_id varchar2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    --
    Cur_TabRedirect RECORD;
    -- 
    v_NextNo VARCHAR2(32) ;
    v_count NUMBER(10):=0;
    v_PInstance_Log_ID VARCHAR2(32);
    v_Client_ID VARCHAR2(32);
    v_Aux NUMBER;
  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,i.AD_User_ID, i.AD_Client_ID, p.ParameterName, p.P_String, p.P_Date 
         FROM AD_PInstance i
           LEFT JOIN AD_PInstance_Para p ON i.AD_PInstance_ID=p.AD_PInstance_ID
         WHERE i.AD_PInstance_ID=p_PInstance_ID
         ORDER BY p.SeqNo) 
      LOOP
           IF (Cur_Parameter.ParameterName = 'AD_Module_ID') THEN
               p_ad_module_id := Cur_Parameter.P_String;
	       DBMS_OUTPUT.PUT_LINE('  AD_Module_ID=' || p_ad_module_id) ;
	   ELSIF (Cur_Parameter.ParameterName = 'AD_Table_ID') THEN
               p_ad_table_id := Cur_Parameter.P_String;
	       DBMS_OUTPUT.PUT_LINE('  AD_Table_ID=' || p_ad_table_id) ;
           ELSE
               DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
           END IF;
	  v_Record_ID:=Cur_Parameter.Record_ID;
          v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;

  BEGIN --BODY 


    IF(p_ad_table_id IS NULL OR v_Record_ID IS NULL OR v_Record_ID = p_ad_table_id) THEN
      RAISE_APPLICATION_ERROR(-20000, '@SCR_CKInvalidTable@');
    END IF;

    v_count:=0;
    FOR Cur_TabRedirect IN
    (SELECT * FROM SCR_Tabredirect
     WHERE AD_Table_ID=p_ad_table_id)
    LOOP

      SELECT count(*) INTO v_Aux FROM SCR_Tabredirect WHERE AD_Table_ID = v_Record_ID AND keyword = Cur_TabRedirect.keyword;
      IF(v_Aux = 0) THEN
        AD_Sequence_Next('SCR_Tabredirect', '0', v_NextNo) ;
        INSERT INTO scr_tabredirect(
            scr_tabredirect_id, ad_client_id, ad_org_id, isactive, created, 
            updated, createdby, updatedby, ad_table_id, ad_module_id, keyword, 
            ad_window_id)
        VALUES (
            v_NextNo, '0', '0', 'Y', now(), 
            now(), '0', '0', v_Record_ID, p_ad_module_id, Cur_TabRedirect.keyword, 
            Cur_TabRedirect.ad_window_id);

        v_count:=v_count+1;
      END IF;

    END LOOP;

    v_Message:=v_Message || '@Created@ = ' || v_count;

    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    RETURN;
    
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
--  RETURN;
END SCR_TABLE_COPYKEYWORD
]]></body>
    </function>
  </database>
