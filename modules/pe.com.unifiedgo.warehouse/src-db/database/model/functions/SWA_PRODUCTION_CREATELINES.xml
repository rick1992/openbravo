<?xml version="1.0"?>
  <database name="FUNCTION SWA_PRODUCTION_CREATELINES">
    <function name="SWA_PRODUCTION_CREATELINES" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistics
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32);
  v_Result NUMBER:=1; -- Success
  v_fromrequerimiento_id VARCHAR2(32);
  v_requirement_request_id VARCHAR2(32);
  v_swa_requirement_request_id VARCHAR2(32);
  is_requirement_trx char(1);
  v_isrequest char(1);
  v_reason VARCHAR2(300):= '';
  v_description VARCHAR2(2000);


  v_pinstance_ID VARCHAR(32);
  v_pinstance_result AD_PInstance.result%TYPE;
  v_pinstance_msg AD_PInstance.errormsg%TYPE;
  v_orderApprovedState VARCHAR(32);
  Cur_Parameter RECORD;

  v_client_id VARCHAR2(32);
  v_org_id VARCHAR2(32);
  v_count_pplan NUMBER:=0;

BEGIN
    
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
    -- Get Parameters
    IF (p_PInstance_ID IS NULL) THEN
      RAISE NO_DATA_FOUND ;
    END IF;

    SELECT Record_ID, CreatedBy
      INTO v_Record_ID, v_User_ID
      FROM AD_PInstance
     WHERE AD_PInstance_ID = p_PInstance_ID;

     SELECT ad_client_id, ad_org_id INTO 
      v_client_id, v_org_id
      FROM m_production where m_production_id = v_Record_ID for update;

    SELECT count(*) INTO v_count_pplan FROM M_PRODUCTIONPLAN WHERE M_PRODUCTION_ID = v_Record_ID;
      IF(v_count_pplan=0) THEN
        RAISE_APPLICATION_ERROR(-20000, '@swa_bom_need_pplan@');
      END IF;

   
   --Vamos a Ejecutar el m_production Run para que cree las lineas de produccion
    v_pinstance_id := get_uuid();
    INSERT INTO ad_pinstance (
           ad_pinstance_id, ad_process_id, record_id, isactive, 
           ad_user_id, ad_client_id, ad_org_id, created, createdby,
           updated, updatedby
    ) VALUES (
           v_pinstance_id, '137', v_record_id, 'Y',
           v_User_ID, v_client_id, v_org_id, now(), v_User_ID,
           now(), v_User_ID
    );

   

    M_PRODUCTION_RUN(v_pinstance_ID);



    SELECT result, errormsg
      INTO v_pinstance_result, v_pinstance_msg
      FROM ad_pinstance
     WHERE ad_pinstance_id = v_pinstance_id;
            
     IF (v_pinstance_result = 0) THEN
        RAISE_APPLICATION_ERROR(-20000, v_pinstance_msg);
     END IF;
     --END PRODUCION_RUN



   --Vamos a ejecutar la funcion que hace la reserva de los productionlines
    v_pinstance_id := get_uuid();
    INSERT INTO ad_pinstance (
           ad_pinstance_id, ad_process_id, record_id, isactive, 
           ad_user_id, ad_client_id, ad_org_id, created, createdby,
           updated, updatedby
    ) VALUES (
           v_pinstance_id, 'A8FA1A1B44644C3898FF3813AE1DE8AE', v_record_id, 'Y',
           v_User_ID, v_client_id, v_org_id, now(), v_User_ID,
           now(), v_User_ID
    );

     -- PERFORM SWA_PRODUCTION_RESERVATION(v_pinstance_ID);

     SELECT result, errormsg
       INTO v_pinstance_result, v_pinstance_msg
       FROM ad_pinstance
      WHERE ad_pinstance_id = v_pinstance_id;

     IF (v_pinstance_result = 0) THEN
        RAISE_APPLICATION_ERROR(-20000, v_pinstance_msg);
     END IF;
      ------------ END RESERVA
    
        
    v_Message:='Terminated';
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;

    EXCEPTION
    WHEN OTHERS THEN
      v_ResultStr:= SQLERRM;
      IF(p_PInstance_ID IS NOT NULL) THEN
        AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
      END IF;
    RETURN;
END SWA_PRODUCTION_CREATELINES
]]></body>
    </function>
  </database>
