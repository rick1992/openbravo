<?xml version="1.0"?>
  <database name="FUNCTION SSA_CONTRACTORPROSPECT_POST">
    <function name="SSA_CONTRACTORPROSPECT_POST" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_contract_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistics
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_User VARCHAR2(32);
  v_IsProcessing CHAR(1) ;
  v_IsProcessed VARCHAR(60) ;
  v_Result NUMBER:=1; -- Success
  v_is_included NUMBER:=0;
   
  Cur_Parameter RECORD;
  CurLines RECORD;
  CurPref RECORD;

  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_UpdatedBy VARCHAR2(32);
  v_DocAction VARCHAR(60);
  v_DocStatus VARCHAR(60);
  v_propDocStatus VARCHAR(60);
  v_DocType_ID VARCHAR2(32);
  v_DocTypeTarget_ID VARCHAR2(32);
  v_DocSubTypeSO VARCHAR(60) ;
  v_DocSubTypeSOTarget VARCHAR(60) ;
  v_IsBinding CHAR(1):='Y';
  v_Line NUMBER:=0;
  v_DocumentNo VARCHAR2(200) ;
  v_c_Bpartner_ID VARCHAR2(32);
  v_c_Currency_ID VARCHAR2(32);
  FINISH_PROCESS BOOLEAN:=FALSE;
  END_PROCESSING BOOLEAN:=FALSE;
  v_count NUMBER;
  v_M_Pricelist_ID VARCHAR(32);
  v_specialdoctype VARCHAR(60);

  v_rel_prospect_id VARCHAR(32);
  v_disc_eval_status VARCHAR(60);
  v_discount NUMBER;
  v_is_disc_li_eval_req CHAR(1);
  v_is_disc_doc_eval_req CHAR(1):='N';
  v_reserveaction VARCHAR(60);
  v_reservationdate DATE;
  v_reservationuser VARCHAR(32);
  
  BEGIN

    IF (p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String,
          p.P_Number, p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_User:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      v_Record_ID:=p_contract_id;
      SELECT CREATEDBY INTO v_User FROM SSA_ProjProp_Contract WHERE SSA_ProjProp_Contract_ID=p_contract_id;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
  BEGIN --BODY


    /**
    * Read Sales Property Contract/Prospect
    */
    v_ResultStr:='ReadingSalesPropertyContractOrProspect';
    SELECT Processing, Processed, DocAction, DocStatus, C_DocType_ID, C_DocTypeTarget_ID, 
           AD_Client_ID, AD_Org_ID, UpdatedBy, documentno, C_Bpartner_ID, C_Currency_ID, m_pricelist_id,
           discount_eval_status, prospect_id, reservelines 
      INTO v_IsProcessing, v_IsProcessed, v_DocAction, v_DocStatus, v_DocType_ID, v_DocTypeTarget_ID, 
           v_Client_ID, v_Org_ID, v_UpdatedBy, v_DocumentNo, v_c_Bpartner_ID, v_c_Currency_ID, v_M_Pricelist_ID,
           v_disc_eval_status, v_rel_prospect_id, v_reserveaction
      FROM SSA_ProjProp_Contract
     WHERE SSA_ProjProp_Contract_ID=v_Record_ID FOR UPDATE;

    -- Get current DocSubTypeSO
    SELECT DocSubTypeSO, DocSubTypeSO, em_sco_specialdoctype
      INTO v_DocSubTypeSO, v_DocSubTypeSOTarget, v_specialdoctype
      FROM C_DOCTYPE
     WHERE C_DocType_ID=v_DocTypetarget_ID;

    IF (v_DocAction = 'CO') THEN
      --Validations
      --Check if Sales Property Contract/Prospect has Lines      
      SELECT COUNT(*)
        INTO v_Count
        FROM SSA_ProjProp_Contract_Line
       WHERE SSA_ProjProp_Contract_ID = v_Record_ID;
      IF v_Count=0 THEN
        RAISE_APPLICATION_ERROR(-20000, '@SSA_DocumentWithoutLines@');
      END IF;
       
      --Check for compatibility between header and line ( cbpartner and currency)
      FOR CurLines IN
        (SELECT * FROM SSA_ProjProp_Contract_Line WHERE SSA_ProjProp_Contract_ID=v_Record_ID  ORDER BY line)
      LOOP
	    IF(Curlines.C_Bpartner_ID <> v_c_Bpartner_ID OR Curlines.C_Currency_ID <> v_c_Currency_ID) THEN
	      v_Message := '@SSA_NotPossibleCompleteDocument@' || ' ' || v_DocumentNo;
          v_Message := v_Message || ' ' || '@line@' || ' ' || CurLines.line || '. ';
          v_Message := v_Message || '@SSA_InvalidLine@';
          RAISE_APPLICATION_ERROR(-20000, v_Message);
	    END IF;
      END LOOP;


      --Logic for Evaluate Discount Approval Status
      IF (v_specialdoctype = 'SSAARCONTRACT' AND v_disc_eval_status = 'NAP') THEN
         IF (p_PInstance_ID IS NOT NULL) THEN
           v_Message := '@SSA_ContractWithDiscountDissaproved@';
           v_Result := 2; --Warning
           AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
         END IF;           
      END IF;
      
      IF (v_specialdoctype = 'SSAARCONTRACT' AND v_disc_eval_status = 'TA') THEN
         IF (p_PInstance_ID IS NOT NULL) THEN
           v_Message := '@SSA_SalesContractCantBeEvaluated@';
           v_Result := 2; --Warning
           AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
         END IF;    	    
	 RETURN; --Exit From Post Funcion         
      END IF; 

      IF (v_specialdoctype = 'SSAARCONTRACT' AND v_disc_eval_status = 'NAP') THEN
         IF (p_PInstance_ID IS NOT NULL) THEN
           v_Message := '@SSA_ContractDisapproved@';
           v_Result := 2; --Warning
           AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
         END IF;    	    
	 RETURN; --Exit From Post Funcion         
      END IF;       

      --Evaluating
      IF (v_specialdoctype = 'SSAARCONTRACT' AND v_disc_eval_status = 'DR') THEN --NOT IN ('AP','NRE')
         FOR CurLines IN
	   (SELECT SSA_ProjProp_Contract_Line_ID, discount FROM SSA_ProjProp_Contract_Line WHERE SSA_ProjProp_Contract_ID=v_Record_ID  ORDER BY line)
         LOOP
            v_discount := (CASE WHEN (CurLines.discount > 0) THEN CurLines.discount ELSE 0 END);
            
            --Preferences of discount evaluations
            v_is_disc_li_eval_req:='N';
	    FOR CurPref IN
	      (SELECT * FROM ssa_discount_preference WHERE approveall='N' AND isactive='Y' AND ad_client_id=v_Client_ID AND AD_ISORGINCLUDED(v_Org_ID,ad_org_id,ad_client_id) <> -1 ORDER BY created DESC)
	    LOOP 
	       IF (v_discount >= CurPref.range_from AND v_discount <= COALESCE(CurPref.range_to,99999999)) THEN	
	          v_is_disc_li_eval_req:='Y';
	          UPDATE SSA_ProjProp_Contract_Line 
	             SET discount_eval_status='TA', discount_eval_by=CurPref.discount_evaluator_id 
	           WHERE SSA_ProjProp_Contract_Line_ID=CurLines.SSA_ProjProp_Contract_Line_ID; 
	          EXIT;
	       END IF;     	        	      
	    END LOOP;
	    --
	    IF (v_is_disc_li_eval_req='N') THEN
	       UPDATE SSA_ProjProp_Contract_Line 
	          SET discount_eval_status='NRE'
	        WHERE SSA_ProjProp_Contract_Line_ID=CurLines.SSA_ProjProp_Contract_Line_ID; 	 
	    ELSE 
	       v_is_disc_doc_eval_req:='Y';          
	    END IF;	    	   
         END LOOP;

	
         IF (v_is_disc_doc_eval_req='Y') THEN
	    UPDATE SSA_ProjProp_Contract
	       SET discount_eval_status='TA'
	     WHERE SSA_ProjProp_Contract_ID=v_Record_ID; 

            IF (p_PInstance_ID IS NOT NULL) THEN
              v_Message := '@SSA_ContractNeedsApprobation@';
              v_Result := 2; --Warning
              AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
            END IF;    	    
	    RETURN; --Exit From Post Funcion
	     
         ELSE     
	    UPDATE SSA_ProjProp_Contract
	       SET discount_eval_status='NRE'
	     WHERE SSA_ProjProp_Contract_ID=v_Record_ID;          
         END IF; 

         
         
      END IF;    
      --  
      --End Logic for Evaluate Discount Approval Status
      
   END IF;

	      
    /**
    * Order Closed, Voided or Reversed - No action possible
    */
    IF(v_DocStatus IN('CL', 'VO', 'RE')) THEN
      RAISE_APPLICATION_ERROR(-20000, '@AlreadyPosted@') ;
    END IF;

    
    IF (NOT FINISH_PROCESS) THEN     
      /**
       * Everything done
       */
      IF (v_IsProcessed='Y' AND v_DocAction NOT IN('RC', 'RE','CL')) THEN
        RAISE_APPLICATION_ERROR(-20000, '@AlreadyPosted@');
      END IF;
    END IF;--FINISH_PROCESS

    IF(NOT FINISH_PROCESS) THEN
      IF(v_IsProcessing='Y') THEN
        RAISE_APPLICATION_ERROR(-20000, '@OtherProcessActive@') ;
      END IF;

      IF (NOT FINISH_PROCESS) THEN
        /**************************************************************************
        * Start Processing ------------------------------------------------------
        *************************************************************************/
        v_ResultStr:='LockingContract';
        BEGIN -- FOR COMMIT
          UPDATE SSA_ProjProp_Contract
             SET Processing='Y',
                 Updated=now(),
                 UpdatedBy=v_UpdatedBy
           WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
          -- Now, needs to go to END_PROCESSING to unlock
          -- This Commit must remanin due differences between PL execution in Oracle and Postgres
          IF (p_PInstance_ID IS NOT NULL) THEN
            COMMIT;
          END IF;
          EXCEPTION WHEN OTHERS THEN RAISE NO_DATA_FOUND;
        END;--FOR  COMMIT
      
        BEGIN -- FOR COMMIT
          SELECT COUNT(*)
            INTO v_Count
            FROM SSA_ProjProp_Contract C, SSA_ProjProp_Contract_Line OL
           WHERE C.SSA_ProjProp_Contract_ID = OL.SSA_ProjProp_Contract_id
             AND AD_ISORGINCLUDED(OL.AD_Org_ID, C.AD_Org_ID, C.AD_Client_ID) = -1
             AND C.SSA_ProjProp_Contract_ID = v_Record_ID;
          IF (v_Count>0) THEN
            RAISE_APPLICATION_ERROR(-20000, '@NotCorrectOrgLines@') ;
          END IF;

          SELECT COUNT(*)
            INTO v_Count
            FROM SSA_ProjProp_Contract C, C_DOCTYPE
           WHERE C_DocType.DocBaseType IN ('ARI','API')
             AND C_DocType.IsSOTrx= 'Y'
             AND AD_ISORGINCLUDED(C.AD_Org_ID,C_DocType.AD_Org_ID, C.AD_Client_ID) <> -1
             AND C.C_DOCTYPETARGET_ID = C_DOCTYPE.C_DOCTYPE_ID
	         AND C_DocType.em_sco_specialdoctype IN ('SSAARCONTRACT','SSAARPROSPECT')
             AND C.SSA_ProjProp_Contract_ID = v_Record_ID;
          IF (v_Count=0) THEN
            RAISE_APPLICATION_ERROR(-20000, '@SCO_NotCorrectOrgDoctypeBOE@') ;
          END IF;

        END; -- FOR COMMIT
      END IF;--FINISH_PROCESS


      /**
      * Re-activate
      */
      IF (v_DocAction='RE') THEN     
        DBMS_OUTPUT.PUT_LINE('Re-Activating ' || v_DocSubTypeSO || ': ' || v_Record_ID) ;
         
        --Update Contract/Prospect
        v_ResultStr:='ReActivate';

        --Validations
        IF(v_specialdoctype = 'SSAARCONTRACT') THEN	           
          --Check if contract has credit memos asociated to it
          IF(EXISTS(SELECT 1 FROM ssa_contract_debitmemo WHERE ssa_projprop_contract_id=v_Record_ID)) THEN
            RAISE_APPLICATION_ERROR(-20000, '@SSA_ExistsContractDebitMemos@');
          END IF;  

          --Check if contract has payment schedules asociated to it
          IF(EXISTS(SELECT 1 FROM ssa_contract_payment_sched WHERE ssa_projprop_contract_id=v_Record_ID AND (c_invoice_id IS NOT NULL OR creditmemo_id IS NOT NULL))) THEN
            RAISE_APPLICATION_ERROR(-20000, '@SSA_ExistsInvoicesAsociatedInContract@');
          END IF;              

        ELSIF(v_specialdoctype = 'SSAARPROSPECT') THEN 
          --check if lines are reserved
          IF (v_reserveaction='UNDO_RESERVE') THEN
            RAISE_APPLICATION_ERROR(-20000, '@SSA_CannotReactivateProspectReserved@');
          END IF;
          
          --Check if prospect is referenced in any contract
          IF(EXISTS(SELECT 1 FROM SSA_ProjProp_Contract WHERE specialdoctype='SSAARCONTRACT' AND prospect_id=v_Record_ID)) THEN
            RAISE_APPLICATION_ERROR(-20000, '@SSA_existsContractWithProspect@');
          END IF;          
        END IF;
        
        --Contract PROCESS: revert reservation of project properties  
        IF(v_specialdoctype = 'SSAARCONTRACT') THEN	    

          FOR CurLines IN
            (SELECT * FROM SSA_ProjProp_Contract_Line WHERE SSA_ProjProp_Contract_ID=v_Record_ID ORDER BY line)
          LOOP
            SELECT docstatus 
              INTO v_propDocStatus 
              FROM SSA_Project_Property 
             WHERE SSA_Project_Property_ID=CurLines.SSA_Project_Property_ID;
            --IF(v_propDocStatus='SOLD') THEN 
            --  RAISE_APPLICATION_ERROR(-20000, '@SSA_CannotFreeProjectProperty@' || ' ' || '@line@' || ' ' || CurLines.line);
 	    --END IF;

	    --Libering Property
	    UPDATE SSA_Project_Property 
	       SET docstatus='FREE', reservationdate=NULL, reservationuser=NULL 
	     WHERE SSA_Project_Property_ID=CurLines.SSA_Project_Property_ID;

	  END LOOP;

	  --Undo reservation from prospect related
	  UPDATE SSA_ProjProp_Contract
	     SET reservationdate=NULL, reservationuser=NULL, reservelines='RESERVE'
	   WHERE SSA_ProjProp_Contract_id=v_rel_prospect_id;

	  --Change all lines status to DR 
	  UPDATE SSA_ProjProp_Contract_Line
             SET LineStatus='DR', -- Draft
                 Updated=now(),
                 UpdatedBy=v_User
           WHERE SSA_ProjProp_Contract_ID=v_Record_ID;           
          
        ELSIF(v_specialdoctype = 'SSAARPROSPECT') THEN --do nothing
                
        END IF;	

 
        --Reactivating discount evaluations
	IF (v_specialdoctype = 'SSAARCONTRACT') THEN
	   UPDATE SSA_ProjProp_Contract_Line
              SET discount_eval_status='DR',
                  discount_eval_updated=NULL,
	          discount_eval_updatedby=NULL,
		  discount_eval_by=NULL 
            WHERE SSA_ProjProp_Contract_ID=v_Record_ID;

           UPDATE SSA_ProjProp_Contract
              SET discount_eval_status='DR',
                  discount_eval_updated=NULL,
	          discount_eval_updatedby=NULL,
		  discount_eval_description=NULL 
            WHERE SSA_ProjProp_Contract_ID=v_Record_ID;	  
	END IF;   

	
        --Change the docstatus to DR so we can unreserve properties in contract
	UPDATE SSA_ProjProp_Contract
           SET DocStatus='DR', -- Draft
               DocAction='CO',
               Processing='N',
	           Processed='N',
               Updated=now(),
               UpdatedBy=v_User
         WHERE SSA_ProjProp_Contract_ID=v_Record_ID;     

      
        FINISH_PROCESS:=TRUE;
      END IF;     

    END IF;--FINISH_PROCESS


    IF (NOT FINISH_PROCESS) THEN
      SELECT COUNT(*)
        INTO v_Count
        FROM SSA_ProjProp_Contract C, C_DOCTYPE
       WHERE C_DocType.DocBaseType IN ('ARI','API')
         AND C_DocType.IsSOTrx= 'Y'
         AND AD_ISORGINCLUDED(C.AD_Org_ID,C_DocType.AD_Org_ID, C.AD_Client_ID) <> -1
         AND C.C_DOCTYPETARGET_ID = C_DOCTYPE.C_DOCTYPE_ID
	     AND C_DocType.em_sco_specialdoctype IN ('SSAARCONTRACT','SSAARPROSPECT')
         AND C.SSA_ProjProp_Contract_ID = v_Record_ID;
      IF (v_Count=0) THEN
        RAISE_APPLICATION_ERROR(-20000, '@SCO_NotCorrectOrgDoctypeBOE@') ;
      END IF;

      SELECT COUNT(*)
        INTO v_Count
        FROM SSA_ProjProp_Contract C, SSA_ProjProp_Contract_Line OL
       WHERE C.SSA_ProjProp_Contract_ID = OL.SSA_ProjProp_Contract_id
         AND AD_ISORGINCLUDED(OL.AD_Org_ID, C.AD_Org_ID, C.AD_Client_ID) = -1
         AND C.SSA_ProjProp_Contract_ID = v_Record_ID;
      IF (v_Count>0) THEN
        RAISE_APPLICATION_ERROR(-20000, '@NotCorrectOrgLines@') ;
      END IF;
      
      /**
      * Close Order - prepare
      */
      /**************************************************************************
      * Start Processing ------------------------------------------------------
      *************************************************************************/
      -- Check the header belongs to a organization where transactions are posible and ready to use
      SELECT AD_ORG_CHK_DOCUMENTS('SSA_ProjProp_Contract', 'SSA_ProjProp_Contract_Line', v_Record_ID, 'SSA_ProjProp_Contract_ID', 'SSA_ProjProp_Contract_ID') INTO v_is_included FROM dual;
      IF (v_is_included=-1) THEN
        RAISE_APPLICATION_ERROR(-20000, '@LinesAndHeaderDifferentLEorBU@');
      END IF;

      WHILE(v_DocType_ID<>v_DocTypeTarget_ID)
      LOOP
        BEGIN
          v_ResultStr:='UpdateDocType';
          UPDATE SSA_ProjProp_Contract
             SET C_DocType_ID=C_DocTypeTarget_ID,
                 Updated=now(),
                 UpdatedBy=v_UpdatedBy
           WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
          v_DocType_ID:=v_DocTypeTarget_ID;
        EXCEPTION
          WHEN OTHERS THEN
            v_ResultStr:='UpdateDocumentNo';
            UPDATE SSA_ProjProp_Contract
               SET DocumentNo=DocumentNo || '.'
             WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
        END;
      END LOOP;

      IF (p_PInstance_ID IS NOT NULL) THEN
        v_ResultStr:='LockingOrder';
        UPDATE SSA_ProjProp_Contract  SET Processing='Y'  WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
        COMMIT;
        -- Now, needs to go to END_PROCESSING to unlock
      END IF;


      /**
      * Allowed Actions:  COmplete, CLose, Void
      */
      IF (v_DocAction IN('CO')) THEN
        NULL;
      ELSE
        RAISE_APPLICATION_ERROR(-20000, '@ActionNotAllowedHere@') ;
      END IF;


      /**
      * Convert to Target DocType
      */
      DECLARE
        v_DocSubTypeSO_Target VARCHAR(60) ;
      BEGIN
        v_ResultStr:='ConvertingDocType';
        IF (v_DocType_ID <> v_DocTypeTarget_ID) THEN
          -- New
          IF (v_DocStatus='DR' OR v_DocType_ID='0') THEN
            -- Update to Target Document Type
            WHILE(v_DocType_ID<>v_DocTypeTarget_ID)
            LOOP
              BEGIN
                v_ResultStr:='UpdateDocType';
                UPDATE SSA_ProjProp_Contract
                   SET C_DocType_ID=v_DocTypeTarget_ID,
                       Updated=now(),
                       UpdatedBy=v_User
                 WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
                       v_DocType_ID:=v_DocTypeTarget_ID;
              EXCEPTION
              WHEN OTHERS THEN
                v_ResultStr:='UpdateDocumentNo';
                UPDATE SSA_ProjProp_Contract  SET DocumentNo=DocumentNo || '.'  WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
              END;
            END LOOP;
          ELSE
            v_ResultStr:='GetTargetDocType';
            SELECT DocSubTypeSO
              INTO v_DocSubTypeSO_Target
            FROM C_DOCTYPE
            WHERE C_DocType_ID=v_DocTypeTarget_ID;
            DBMS_OUTPUT.PUT_LINE('Changing DocType from ' || v_DocSubTypeSO || ' to ' || v_DocSubTypeSO_Target) ;
            -- Change Offer to anything, Change InProcess to anything
            IF (v_DocSubTypeSO IN('ON', 'OB') OR v_DocStatus='IP') THEN
              -- Update to Target Document Type
              WHILE(v_DocType_ID<>v_DocTypeTarget_ID)
              LOOP
                BEGIN
                  v_ResultStr:='UpdateDocType';
                  UPDATE SSA_ProjProp_Contract
                     SET C_DocType_ID=v_DocTypeTarget_ID,
                         Updated=now(),
                         UpdatedBy=v_User
                   WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
                         v_DocType_ID:=v_DocTypeTarget_ID;
                EXCEPTION
                WHEN OTHERS THEN
                  v_ResultStr:='UpdateDocumentNo';
                  UPDATE SSA_ProjProp_Contract  SET DocumentNo=DocumentNo || '.'  WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
                END;
              END LOOP;
            ELSE
              -- Change Back
              UPDATE SSA_ProjProp_Contract
                 SET C_DocTypeTarget_ID=v_DocType_ID
               WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
              RAISE_APPLICATION_ERROR(-20000, '@CannotChangeDocType@') ;
            END IF;
          END IF;
        END IF; -- C_DocType_ID <> C_DocTypeTarget_ID
      END; -- Conversion


      /**
      * Get DocSubTypeSO + Is it Binding :1:2
      */
      v_ResultStr:='TestBinding DocType_ID=' || v_DocType_ID;
      SELECT CASE DocSubTypeSO WHEN 'ON' THEN 'N' ELSE 'Y' END, DocSubTypeSO
        INTO v_IsBinding, v_DocSubTypeSO
        FROM C_DOCTYPE
       WHERE C_DocType_ID=v_DocType_ID;
      DBMS_OUTPUT.PUT_LINE('DocSubTypeSO=' || v_DocSubTypeSO || ' IsBinding=' || v_IsBinding) ;

      -- Synchronize Client/Org Ownership
      UPDATE SSA_ProjProp_Contract
         SET AD_Client_ID=v_Client_ID
       WHERE SSA_ProjProp_Contract_ID=v_Record_ID
         AND (AD_Client_ID<>v_Client_ID) ;


      /**
      * Complete
      */
      IF(v_DocAction = 'CO') THEN
       
        --Contract PROCESS: reservation of project properties in lines
        IF(v_specialdoctype = 'SSAARCONTRACT') THEN	    

          SELECT discount_eval_status INTO v_disc_eval_status FROM SSA_ProjProp_Contract WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
          IF (v_disc_eval_status NOT IN('AP','NRE')) THEN
             IF (p_PInstance_ID IS NOT NULL) THEN
               v_Message := '@SSA_ContractIncorrectDiscountStatusToCO@';
               v_Result := 2; --Warning
               AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
             END IF;    	             
          END IF;
        

          FOR CurLines IN
            (SELECT * FROM SSA_ProjProp_Contract_Line WHERE SSA_ProjProp_Contract_ID=v_Record_ID  ORDER BY line)
          LOOP
            SELECT docstatus, reservationdate, reservationuser
              INTO v_propDocStatus, v_reservationdate, v_reservationuser 
              FROM SSA_Project_Property 
             WHERE SSA_Project_Property_ID=CurLines.SSA_Project_Property_ID;
            IF(v_propDocStatus='SOLD') THEN
              RAISE_APPLICATION_ERROR(-20000, '@SSA_CannotSoldProperty@' || ' ' || '@line@' || ' ' || CurLines.line);
            ELSIF(v_propDocStatus='RESERVED') THEN          
              IF (v_reservationuser<>v_User) THEN
                RAISE_APPLICATION_ERROR(-20000, '@SSA_CannotSoldPropertyReservedByOtherUser@' || ' ' || '@line@' || ' ' || CurLines.line);
              END IF;
 	    END IF;

	    UPDATE SSA_Project_Property SET docstatus='SOLD' WHERE SSA_Project_Property_ID=CurLines.SSA_Project_Property_ID;
	  END LOOP;

	  --Change all lines status to DR 
	  UPDATE SSA_ProjProp_Contract_Line
             SET LineStatus='CO', -- Draft
                 Updated=now(),
                 UpdatedBy=v_User
           WHERE SSA_ProjProp_Contract_ID=v_Record_ID;	  

          
        ELSIF(v_specialdoctype = 'SSAARPROSPECT') THEN --do nothing
        
        END IF;	
	   	   	                
      END IF;


    END IF;--FINISH_PROCESS


    IF (NOT FINISH_PROCESS AND NOT END_PROCESSING) THEN
     /**
      * In Progress -----------------------------------------------------------
      */
      UPDATE SSA_ProjProp_Contract
         SET DocStatus='IP',
             Updated=now(),
             UpdatedBy=v_User
       WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
      IF (p_PInstance_ID IS NOT NULL) THEN
        COMMIT;
      END IF;

     /**
      * Finished with processing
      */
      IF (v_DocAction='PR') THEN
        v_ResultStr:='FinishProcessing';
        UPDATE SSA_ProjProp_Contract
           SET DocStatus='IP',
               DocAction='CO',
               Processed='N',
               Updated=now(),
               UpdatedBy=v_User
         WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
         END_PROCESSING:=TRUE;
      END IF;
    END IF;--FINISH_PROCESS

  
    IF (NOT FINISH_PROCESS AND NOT END_PROCESSING) THEN
      IF (v_DocAction IN('CO', 'CL')) THEN
        UPDATE SSA_ProjProp_Contract
           SET DocStatus='CO',
               DocAction='RE',
               Processed='Y',
               Updated=now(),
               UpdatedBy=v_User
         WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
      END IF;

      IF (v_DocAction NOT IN('CO')) THEN
        END_PROCESSING:=TRUE;
      END IF;
    END IF;--FINISH_PROCESS

    IF (NOT FINISH_PROCESS) THEN

      IF (v_DocAction='CL') THEN     
        --Close de Sales Property Contract/Prospect no futher actions are permited
        UPDATE SSA_ProjProp_Contract
        SET DocStatus='CL',
            DocAction='--',
            Processed='Y'
        WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
      END IF;
    END IF;--FINISH_PROCESS

    IF (NOT FINISH_PROCESS) THEN
      IF (p_PInstance_ID IS NOT NULL) THEN
        v_ResultStr:='UnLockingOrder';
        UPDATE SSA_ProjProp_Contract
        SET Processing='N',
            Updated=now(),
            UpdatedBy=v_User
        WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
        COMMIT;
      END IF;
    END IF;--FINISH_PROCESS

    --<<FINISH_PROCESS>>
    IF (p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  v_ResultStr:= '@ERROR=' || SQLERRM;
  IF(p_PInstance_ID IS NOT NULL) THEN
    ROLLBACK;
    --Inserted by Carlos Romero 062706
    UPDATE SSA_ProjProp_Contract  SET Processing='N'  WHERE SSA_ProjProp_Contract_ID=v_Record_ID;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE;
  END IF;
  RETURN;
END SSA_CONTRACTORPROSPECT_POST
]]></body>
    </function>
  </database>
