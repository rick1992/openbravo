<?xml version="1.0"?>
  <database name="FUNCTION SCO_ADDALLTABLEACCESS_ROLE">
    <function name="SCO_ADDALLTABLEACCESS_ROLE" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistics
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_User VARCHAR2(32);
  v_IsProcessing CHAR(1) ;
  v_IsProcessed VARCHAR(60) ;
  v_Result NUMBER:=1; -- Success
  v_is_included NUMBER:=0;
  v_is_ready AD_Org.IsReady%TYPE;
  v_is_tr_allow AD_OrgType.IsTransactionsAllowed%TYPE;
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_line RECORD;
  -- Record Info
  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_Org_Name VARCHAR2(60);
  v_UpdatedBy VARCHAR2(32);

  CUR_ADTable RECORD;
  v_NextNo VARCHAR(32);
  v_Aux NUMBER;

  BEGIN
    IF (p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID, i.AD_User_ID, p.ParameterName, p.P_String,
          p.P_Number, p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_User:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
  BEGIN --BODY
  
    /**
    * Read Role
    */
    v_ResultStr:='ReadingRole';
    SELECT AD_Role.AD_Client_ID,
      AD_Role.AD_Org_ID, AD_Role.UpdatedBy

    INTO v_Client_ID,
      v_Org_ID, v_UpdatedBy
    FROM AD_ROLE
    WHERE AD_ROLE_ID=v_Record_ID  FOR UPDATE;

 
    FOR CUR_ADTable IN (SELECT * 
                           FROM AD_Table
                           WHERE isactive='Y')
    LOOP

      SELECT Count(*) 
        INTO v_Aux
        FROM AD_Table_Access
      WHERE AD_Role_ID = v_Record_ID AND
	    AD_Table_ID = CUR_ADTable.AD_Table_ID AND
            AD_Client_ID = v_Client_ID;

      IF(v_Aux=0) THEN
        AD_Sequence_Next('AD_Table_Access', v_Client_ID, v_NextNo);
        INSERT INTO ad_table_access(
                      ad_table_access_id, ad_role_id, ad_table_id, ad_client_id, ad_org_id, 
                      isactive, created, createdby, updatedby, updated, isreadonly, 
                      isexclude)
              VALUES (v_NextNo, v_Record_ID, CUR_ADTable.AD_Table_ID, v_Client_ID, v_Org_ID, 
                      'Y', now(), v_User, v_User, now(), 'N', 
                      'N');
      END IF;

    END LOOP;

    IF (p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  v_ResultStr:= '@ERROR=' || SQLERRM;
  IF(p_PInstance_ID IS NOT NULL) THEN
    ROLLBACK;
    --Inserted by Carlos Romero 062706
    UPDATE AD_ROLE  SET Processing='N'  WHERE AD_ROLE_ID=v_Record_ID;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  ELSE
    RAISE;
  END IF;
  RETURN;
END SCO_ADDALLTABLEACCESS_ROLE
]]></body>
    </function>
  </database>
