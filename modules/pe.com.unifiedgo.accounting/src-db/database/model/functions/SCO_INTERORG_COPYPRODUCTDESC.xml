<?xml version="1.0"?>
  <database name="FUNCTION SCO_INTERORG_COPYPRODUCTDESC">
    <function name="SCO_INTERORG_COPYPRODUCTDESC" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_AD_User_ID VARCHAR2(32):='0';
  -- Parameter
  TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
  Cur_SrcProduct RECORD;
 
  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_UpdatedBy VARCHAR2(32);
  v_Aux NUMBER;

  p_AD_SourceOrg_ID VARCHAR(32);
  p_AD_DestOrg_ID VARCHAR(32);
  p_datefrom DATE;

  v_destProduct_ID VARCHAR(32);

  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,i.AD_User_ID, i.AD_Client_ID, p.ParameterName, p.P_String, p.P_Date 
         FROM AD_PInstance i
           LEFT JOIN AD_PInstance_Para p ON i.AD_PInstance_ID=p.AD_PInstance_ID
         WHERE i.AD_PInstance_ID=p_PInstance_ID
         ORDER BY p.SeqNo) 
      LOOP
         IF (Cur_Parameter.ParameterName = 'AD_SourceOrg_ID') THEN
             p_AD_SourceOrg_ID := Cur_Parameter.P_String;
	     DBMS_OUTPUT.PUT_LINE('  p_AD_SourceOrg_ID=' || p_AD_SourceOrg_ID);
         ELSIF (Cur_Parameter.ParameterName = 'AD_DestOrg_ID') THEN
             p_AD_DestOrg_ID := Cur_Parameter.P_String;
	     DBMS_OUTPUT.PUT_LINE('  p_AD_DestOrg_ID=' || p_AD_DestOrg_ID);
         ELSIF (Cur_Parameter.ParameterName = 'datefrom') THEN
             p_datefrom := Cur_Parameter.P_Date;
	     DBMS_OUTPUT.PUT_LINE('  p_datefrom=' || p_datefrom);
         ELSE
             DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
         END IF;

	  v_Record_ID:=Cur_Parameter.Record_ID;
          v_AD_User_ID:=Cur_Parameter.AD_User_ID;
          v_Client_ID:=Cur_Parameter.AD_Client_ID;
      END LOOP; -- Get Parameter
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;

  BEGIN --BODY 


    IF(p_AD_SourceOrg_ID = p_AD_DestOrg_ID) THEN
      RAISE_APPLICATION_ERROR(-20000, '@SCO_InterOrgCopyPSameOrg@') ;
    END IF;

    FOR Cur_SrcProduct IN
        (SELECT *
           FROM M_Product
           WHERE AD_Client_ID = v_Client_ID AND
	         AD_ISORGINCLUDED(p_AD_SourceOrg_ID, AD_Org_ID, v_Client_ID) <> -1
        )
    LOOP
      --Find the product on the other org
      SELECT M_Product_ID
        INTO v_destProduct_ID
        FROM M_Product
      WHERE AD_Client_ID = Cur_SrcProduct.AD_Client_ID AND
	    AD_ISORGINCLUDED(p_AD_DestOrg_ID,AD_Org_ID, Cur_SrcProduct.AD_Client_ID) <> -1 AND
            em_scr_internalcode = Cur_SrcProduct.em_scr_internalcode LIMIT 1;

      IF(v_destProduct_ID IS NULL OR v_destProduct_ID='') THEN
        CONTINUE;
      END IF;

      UPDATE M_Product
        SET name = Cur_SrcProduct.name,
            description = Cur_SrcProduct.description
      WHERE M_Product_ID = v_destProduct_ID;
    END LOOP;

    v_Message:=v_Message || '@SCO_InterOrgCopyPSuccess@';

    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    RETURN;
    
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
--  RETURN;
END SCO_INTERORG_COPYPRODUCTDESC
]]></body>
    </function>
  </database>
