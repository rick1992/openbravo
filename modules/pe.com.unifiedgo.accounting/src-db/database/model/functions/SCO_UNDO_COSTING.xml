<?xml version="1.0"?>
  <database name="FUNCTION SCO_UNDO_COSTING">
    <function name="SCO_UNDO_COSTING" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_Record_ID VARCHAR2(32);
  v_AD_User_ID VARCHAR2(32):='0';
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_Transaction RECORD;
    Cur_Product RECORD;
    Cur_Period RECORD;
    v_NextNo VARCHAR2(32) ;
    v_count NUMBER(10):=0;
    v_PInstance_Log_ID VARCHAR2(32);
    v_Client_ID VARCHAR2(32);
    v_Aux NUMBER;

    p_c_period_id VARCHAR(32);
    p_c_calendar_id VARCHAR(32);
    v_ad_client_ID VARCHAR(32);
    v_ad_org_ID VARCHAR(32);
    v_c_year_ID VARCHAR(32);
    v_last_costing_id VARCHAR(32);
    v_Posted VARCHAR(60);

    v_startdate DATE;
    v_enddate DATE;

    v_identifier VARCHAR(500);

  BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,i.AD_User_ID, i.AD_Client_ID, p.ParameterName, p.P_String, p.P_Date 
         FROM AD_PInstance i
           LEFT JOIN AD_PInstance_Para p ON i.AD_PInstance_ID=p.AD_PInstance_ID
         WHERE i.AD_PInstance_ID=p_PInstance_ID
         ORDER BY p.SeqNo) 
      LOOP
           IF (Cur_Parameter.ParameterName = 'C_Period_ID') THEN
               p_c_period_id := Cur_Parameter.P_String;
	       DBMS_OUTPUT.PUT_LINE('  C_Period_ID=' || p_c_period_id) ;
           ELSIF (Cur_Parameter.ParameterName = 'C_Calendar_ID') THEN
               p_c_calendar_id := Cur_Parameter.P_String;
	       DBMS_OUTPUT.PUT_LINE('  C_Calendar_ID=' || p_c_calendar_id) ;
           ELSE
               DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
           END IF;
	  v_Record_ID:=Cur_Parameter.Record_ID;
          v_AD_User_ID:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      RAISE NO_DATA_FOUND;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;

  BEGIN --BODY 


    IF(p_c_period_id IS NULL) THEN
      RAISE_APPLICATION_ERROR(-20000, '@SCO_UndoCostingInvalidPeriod@');
    END IF;

    SELECT count(*) 
      INTO v_Aux
      FROM C_Period, C_Year
    WHERE C_Period.c_period_id = p_c_period_id AND
          C_Period.C_Year_ID = C_Year.C_Year_ID AND
          C_Year.C_Calendar_ID = p_c_calendar_id LIMIT 1;

    IF(v_Aux=0) THEN
      RAISE_APPLICATION_ERROR(-20000, '@SCO_UndoCostingInvalidPeriod@');
    END IF;  

    -- Read the selected period
    SELECT AD_Client_ID, AD_Org_ID, startdate, c_year_id
      INTO v_ad_client_ID, v_ad_org_ID, v_startdate, v_c_year_ID
      FROM C_Period
    WHERE C_Period_ID = p_c_period_id;
	   
    -- Check that all periods from v_startdate until now are open
    FOR Cur_Period IN
    (
        SELECT * FROM C_Period 
        WHERE TRUNC(startdate) >= TRUNC(v_startdate) AND TRUNC(enddate) <= TRUNC((date_trunc('MONTH', now()) + INTERVAL '1 MONTH - 1 day')::TIMESTAMP)
        AND AD_Client_ID = v_ad_client_ID
        AND AD_Org_ID = v_ad_org_ID ORDER BY startdate ASC
    )
    LOOP
      
      SELECT count(*)
        INTO v_Aux
        FROM c_periodcontrol
      WHERE c_period_id = Cur_Period.C_Period_ID
      AND COALESCE(periodstatus,'C') <> 'O';

      IF(v_Aux <> 0) THEN
        RAISE_APPLICATION_ERROR(-20000, '@SCO_UndoCostingNotOpenPeriod@' || Cur_Period.name);
      END IF; 
    END LOOP;

    -- Check for the costingbackgroundprocess. it should not be running
    SELECT count(*) 
      INTO v_Aux
      FROM ad_process_request
    WHERE ad_process_id in ('3F2B4AAC707B4CE7B98D2005CF7310B5') AND
	  (ad_client_id='0' OR (ad_client_id=v_ad_client_ID AND AD_ISORGINCLUDED(ad_org_id, v_ad_org_ID, v_ad_client_ID)<>-1)) AND
	  status='SCH';

    IF(v_Aux<>0) THEN
          --RAISE_APPLICATION_ERROR(-20000, '@SCO_UndoCostingBackgroundProcessScheduled@');
    END IF;

    FOR Cur_Product IN 
    (
	SELECT * FROM M_Product WHERE AD_Client_ID = v_ad_client_ID AND
	                              AD_ISORGINCLUDED(v_ad_org_ID, ad_org_id, v_ad_client_ID)<>-1
    )
    LOOP

      --Delete all m_costing from startdate
      UPDATE M_Costing SET ispermanent = 'N' WHERE AD_Client_ID = v_ad_client_ID AND
	                                           AD_ISORGINCLUDED(ad_org_id, v_ad_org_ID, v_ad_client_ID)<>-1 AND
			                           M_Product_ID = Cur_Product.M_Product_ID AND
			                           datefrom>=v_startdate;

      DELETE FROM M_Costing WHERE AD_Client_ID = v_ad_client_ID AND
	                          AD_ISORGINCLUDED(ad_org_id, v_ad_org_ID, v_ad_client_ID)<>-1 AND
			          M_Product_ID = Cur_Product.M_Product_ID AND
			         datefrom>=v_startdate;

      --Set the last costing dateto to infinite
      SELECT M_Costing_ID
        INTO v_last_costing_id
        FROM M_Costing WHERE AD_Client_ID = v_ad_client_ID AND
	                     AD_ISORGINCLUDED(ad_org_id, v_ad_org_ID, v_ad_client_ID)<>-1 AND
			     M_Product_ID = Cur_Product.M_Product_ID  ORDER BY  dateto DESC LIMIT 1 FOR UPDATE;


      IF(v_last_costing_id IS NOT NULL) THEN
        UPDATE M_Costing SET dateto='2099-12-31' WHERE M_Costing_ID = v_last_costing_id;
      END IF;

      DELETE FROM M_Transaction_Cost where m_transaction_id IN 
      ( 
        SELECT t.m_transaction_id
        FROM M_Transaction t
        WHERE t.movementdate>=v_startdate 
        AND t.costing_status='CC' 
        AND t.iscostcalculated='Y'
        AND t.ad_client_id = v_ad_client_ID
        AND t.M_Product_ID = Cur_Product.M_Product_ID
      );

      --Update the transactions
      UPDATE m_transaction SET 
          transactioncost = NULL, 
          m_costing_algorithm_id = NULL, 
          iscostcalculated='N',
          em_sco_costadjusment='N',
          c_currency_id = NULL, 
          costing_status='NC',
          isprocessed = 'N' 
      WHERE movementdate>=v_startdate 
      AND costing_status='CC' 
      AND iscostcalculated='Y'
      AND ad_client_id = v_ad_client_ID
      AND M_Product_ID = Cur_Product.M_Product_ID;

    END LOOP;

    v_Message:=v_Message || '@SCO_UndoCostingSuccessful@';

    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Finished ' || v_Message) ;
    END IF;
    RETURN;
    
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF(p_PInstance_ID IS NOT NULL) THEN
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  END IF;
--  RETURN;
END SCO_UNDO_COSTING
]]></body>
    </function>
  </database>
